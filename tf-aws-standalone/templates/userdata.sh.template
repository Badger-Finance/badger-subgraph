#!/bin/bash
## a userdata script to bring an amazon linux 2 instanec up and running as a local graph node with badger subgraph

yum install -y jq # JSON parser for sh/bash
yum install -y git
yum install -y docker
service docker start
### Set ethnode_url to the url of a eth node that will be used based on an ssm parameter
export AWS_DEFAULT_REGION=${region} ## REMOVE to detemplatize
export ETHNODE_URL=`aws ssm get-parameters --name ${graphnode_url_ssm_arn} | jq -r '.Parameters | .[] | .Value'` ## Change to a string with a url to templatize
## Install Node and yarn
curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
yum -y install nodejs
npm install yarn -g
## Install docker compose
curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

## Setup and install graph-node
mkdir /graph-node ### will run everything from here
cd /graph-node

git clone https://github.com/graphprotocol/graph-node
cd graph-node/docker
mv docker-compose.yml docker-compose.yml.orig
sed "s|mainnet:http://host.docker.internal:8545|mainnet:$ETHNODE_URL|g" docker-compose.yml.orig > docker-compose.yml
sleep 10 #this seems neccessary on a t2.micro
/usr/local/bin/docker-compose up -d
### This system should now be running as a graph node
### Now we need to install some graphs

### Badger subgraph
cd /graph-node
mkdir -p subgraphs/badger-subgraph
cd subgraphs
git clone https://github.com/Badger-Finance/badger-subgraph
cd badger-subgraph
echo "export GRAPH_PATH=\"Badger-Finance/badger-subgraph\"" > .envrc
### fighting with yarn
yarn
yarn codegen
yarn create-local badger-subgraph
yarn deploy-local badger-subgraph

