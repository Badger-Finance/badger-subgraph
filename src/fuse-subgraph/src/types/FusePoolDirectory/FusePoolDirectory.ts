// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolRegistered extends ethereum.Event {
  get params(): PoolRegistered__Params {
    return new PoolRegistered__Params(this);
  }
}

export class PoolRegistered__Params {
  _event: PoolRegistered;

  constructor(event: PoolRegistered) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get pool(): PoolRegisteredPoolStruct {
    return changetype<PoolRegisteredPoolStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class PoolRegisteredPoolStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get comptroller(): Address {
    return this[2].toAddress();
  }

  get blockPosted(): BigInt {
    return this[3].toBigInt();
  }

  get timestampPosted(): BigInt {
    return this[4].toBigInt();
  }
}

export class FusePoolDirectory__poolsResult {
  value0: string;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: string,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getCreator(): Address {
    return this.value1;
  }

  getComptroller(): Address {
    return this.value2;
  }

  getBlockPosted(): BigInt {
    return this.value3;
  }

  getTimestampPosted(): BigInt {
    return this.value4;
  }
}

export class FusePoolDirectory__deployPoolResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }
}

export class FusePoolDirectory__getAllPoolsResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get comptroller(): Address {
    return this[2].toAddress();
  }

  get blockPosted(): BigInt {
    return this[3].toBigInt();
  }

  get timestampPosted(): BigInt {
    return this[4].toBigInt();
  }
}

export class FusePoolDirectory__getPublicPoolsResultValue1Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get comptroller(): Address {
    return this[2].toAddress();
  }

  get blockPosted(): BigInt {
    return this[3].toBigInt();
  }

  get timestampPosted(): BigInt {
    return this[4].toBigInt();
  }
}

export class FusePoolDirectory__getPublicPoolsResult {
  value0: Array<BigInt>;
  value1: Array<FusePoolDirectory__getPublicPoolsResultValue1Struct>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<FusePoolDirectory__getPublicPoolsResultValue1Struct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Array<FusePoolDirectory__getPublicPoolsResultValue1Struct> {
    return this.value1;
  }
}

export class FusePoolDirectory__getPoolsByAccountResultValue1Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get comptroller(): Address {
    return this[2].toAddress();
  }

  get blockPosted(): BigInt {
    return this[3].toBigInt();
  }

  get timestampPosted(): BigInt {
    return this[4].toBigInt();
  }
}

export class FusePoolDirectory__getPoolsByAccountResult {
  value0: Array<BigInt>;
  value1: Array<FusePoolDirectory__getPoolsByAccountResultValue1Struct>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<FusePoolDirectory__getPoolsByAccountResultValue1Struct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Array<FusePoolDirectory__getPoolsByAccountResultValue1Struct> {
    return this.value1;
  }
}

export class FusePoolDirectory extends ethereum.SmartContract {
  static bind(address: Address): FusePoolDirectory {
    return new FusePoolDirectory("FusePoolDirectory", address);
  }

  deployerWhitelist(param0: Address): boolean {
    let result = super.call(
      "deployerWhitelist",
      "deployerWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_deployerWhitelist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "deployerWhitelist",
      "deployerWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  enforceDeployerWhitelist(): boolean {
    let result = super.call(
      "enforceDeployerWhitelist",
      "enforceDeployerWhitelist():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_enforceDeployerWhitelist(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "enforceDeployerWhitelist",
      "enforceDeployerWhitelist():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolExists(param0: Address): boolean {
    let result = super.call("poolExists", "poolExists(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_poolExists(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("poolExists", "poolExists(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pools(param0: BigInt): FusePoolDirectory__poolsResult {
    let result = super.call(
      "pools",
      "pools(uint256):(string,address,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new FusePoolDirectory__poolsResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_pools(
    param0: BigInt
  ): ethereum.CallResult<FusePoolDirectory__poolsResult> {
    let result = super.tryCall(
      "pools",
      "pools(uint256):(string,address,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FusePoolDirectory__poolsResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  registerPool(name: string, comptroller: Address): BigInt {
    let result = super.call(
      "registerPool",
      "registerPool(string,address):(uint256)",
      [ethereum.Value.fromString(name), ethereum.Value.fromAddress(comptroller)]
    );

    return result[0].toBigInt();
  }

  try_registerPool(
    name: string,
    comptroller: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerPool",
      "registerPool(string,address):(uint256)",
      [ethereum.Value.fromString(name), ethereum.Value.fromAddress(comptroller)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deployPool(
    name: string,
    implementation: Address,
    enforceWhitelist: boolean,
    closeFactor: BigInt,
    maxAssets: BigInt,
    liquidationIncentive: BigInt,
    priceOracle: Address
  ): FusePoolDirectory__deployPoolResult {
    let result = super.call(
      "deployPool",
      "deployPool(string,address,bool,uint256,uint256,uint256,address):(uint256,address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(implementation),
        ethereum.Value.fromBoolean(enforceWhitelist),
        ethereum.Value.fromUnsignedBigInt(closeFactor),
        ethereum.Value.fromUnsignedBigInt(maxAssets),
        ethereum.Value.fromUnsignedBigInt(liquidationIncentive),
        ethereum.Value.fromAddress(priceOracle)
      ]
    );

    return new FusePoolDirectory__deployPoolResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_deployPool(
    name: string,
    implementation: Address,
    enforceWhitelist: boolean,
    closeFactor: BigInt,
    maxAssets: BigInt,
    liquidationIncentive: BigInt,
    priceOracle: Address
  ): ethereum.CallResult<FusePoolDirectory__deployPoolResult> {
    let result = super.tryCall(
      "deployPool",
      "deployPool(string,address,bool,uint256,uint256,uint256,address):(uint256,address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(implementation),
        ethereum.Value.fromBoolean(enforceWhitelist),
        ethereum.Value.fromUnsignedBigInt(closeFactor),
        ethereum.Value.fromUnsignedBigInt(maxAssets),
        ethereum.Value.fromUnsignedBigInt(liquidationIncentive),
        ethereum.Value.fromAddress(priceOracle)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FusePoolDirectory__deployPoolResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  getAllPools(): Array<FusePoolDirectory__getAllPoolsResultValue0Struct> {
    let result = super.call(
      "getAllPools",
      "getAllPools():((string,address,address,uint256,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      FusePoolDirectory__getAllPoolsResultValue0Struct
    >();
  }

  try_getAllPools(): ethereum.CallResult<
    Array<FusePoolDirectory__getAllPoolsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllPools",
      "getAllPools():((string,address,address,uint256,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<FusePoolDirectory__getAllPoolsResultValue0Struct>()
    );
  }

  getPublicPools(): FusePoolDirectory__getPublicPoolsResult {
    let result = super.call(
      "getPublicPools",
      "getPublicPools():(uint256[],(string,address,address,uint256,uint256)[])",
      []
    );

    return new FusePoolDirectory__getPublicPoolsResult(
      result[0].toBigIntArray(),
      result[1].toTupleArray<
        FusePoolDirectory__getPublicPoolsResultValue1Struct
      >()
    );
  }

  try_getPublicPools(): ethereum.CallResult<
    FusePoolDirectory__getPublicPoolsResult
  > {
    let result = super.tryCall(
      "getPublicPools",
      "getPublicPools():(uint256[],(string,address,address,uint256,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FusePoolDirectory__getPublicPoolsResult(
        value[0].toBigIntArray(),
        value[1].toTupleArray<
          FusePoolDirectory__getPublicPoolsResultValue1Struct
        >()
      )
    );
  }

  getPoolsByAccount(
    account: Address
  ): FusePoolDirectory__getPoolsByAccountResult {
    let result = super.call(
      "getPoolsByAccount",
      "getPoolsByAccount(address):(uint256[],(string,address,address,uint256,uint256)[])",
      [ethereum.Value.fromAddress(account)]
    );

    return new FusePoolDirectory__getPoolsByAccountResult(
      result[0].toBigIntArray(),
      result[1].toTupleArray<
        FusePoolDirectory__getPoolsByAccountResultValue1Struct
      >()
    );
  }

  try_getPoolsByAccount(
    account: Address
  ): ethereum.CallResult<FusePoolDirectory__getPoolsByAccountResult> {
    let result = super.tryCall(
      "getPoolsByAccount",
      "getPoolsByAccount(address):(uint256[],(string,address,address,uint256,uint256)[])",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FusePoolDirectory__getPoolsByAccountResult(
        value[0].toBigIntArray(),
        value[1].toTupleArray<
          FusePoolDirectory__getPoolsByAccountResultValue1Struct
        >()
      )
    );
  }

  getBookmarks(account: Address): Array<Address> {
    let result = super.call(
      "getBookmarks",
      "getBookmarks(address):(address[])",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toAddressArray();
  }

  try_getBookmarks(account: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getBookmarks",
      "getBookmarks(address):(address[])",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _enforceDeployerWhitelist(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _deployerWhitelist(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class _setDeployerWhitelistEnforcementCall extends ethereum.Call {
  get inputs(): _setDeployerWhitelistEnforcementCall__Inputs {
    return new _setDeployerWhitelistEnforcementCall__Inputs(this);
  }

  get outputs(): _setDeployerWhitelistEnforcementCall__Outputs {
    return new _setDeployerWhitelistEnforcementCall__Outputs(this);
  }
}

export class _setDeployerWhitelistEnforcementCall__Inputs {
  _call: _setDeployerWhitelistEnforcementCall;

  constructor(call: _setDeployerWhitelistEnforcementCall) {
    this._call = call;
  }

  get _enforceDeployerWhitelist(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class _setDeployerWhitelistEnforcementCall__Outputs {
  _call: _setDeployerWhitelistEnforcementCall;

  constructor(call: _setDeployerWhitelistEnforcementCall) {
    this._call = call;
  }
}

export class _whitelistDeployersCall extends ethereum.Call {
  get inputs(): _whitelistDeployersCall__Inputs {
    return new _whitelistDeployersCall__Inputs(this);
  }

  get outputs(): _whitelistDeployersCall__Outputs {
    return new _whitelistDeployersCall__Outputs(this);
  }
}

export class _whitelistDeployersCall__Inputs {
  _call: _whitelistDeployersCall;

  constructor(call: _whitelistDeployersCall) {
    this._call = call;
  }

  get deployers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class _whitelistDeployersCall__Outputs {
  _call: _whitelistDeployersCall;

  constructor(call: _whitelistDeployersCall) {
    this._call = call;
  }
}

export class RegisterPoolCall extends ethereum.Call {
  get inputs(): RegisterPoolCall__Inputs {
    return new RegisterPoolCall__Inputs(this);
  }

  get outputs(): RegisterPoolCall__Outputs {
    return new RegisterPoolCall__Outputs(this);
  }
}

export class RegisterPoolCall__Inputs {
  _call: RegisterPoolCall;

  constructor(call: RegisterPoolCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get comptroller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterPoolCall__Outputs {
  _call: RegisterPoolCall;

  constructor(call: RegisterPoolCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DeployPoolCall extends ethereum.Call {
  get inputs(): DeployPoolCall__Inputs {
    return new DeployPoolCall__Inputs(this);
  }

  get outputs(): DeployPoolCall__Outputs {
    return new DeployPoolCall__Outputs(this);
  }
}

export class DeployPoolCall__Inputs {
  _call: DeployPoolCall;

  constructor(call: DeployPoolCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get implementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get enforceWhitelist(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get closeFactor(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get maxAssets(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get liquidationIncentive(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get priceOracle(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class DeployPoolCall__Outputs {
  _call: DeployPoolCall;

  constructor(call: DeployPoolCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class BookmarkPoolCall extends ethereum.Call {
  get inputs(): BookmarkPoolCall__Inputs {
    return new BookmarkPoolCall__Inputs(this);
  }

  get outputs(): BookmarkPoolCall__Outputs {
    return new BookmarkPoolCall__Outputs(this);
  }
}

export class BookmarkPoolCall__Inputs {
  _call: BookmarkPoolCall;

  constructor(call: BookmarkPoolCall) {
    this._call = call;
  }

  get comptroller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BookmarkPoolCall__Outputs {
  _call: BookmarkPoolCall;

  constructor(call: BookmarkPoolCall) {
    this._call = call;
  }
}
