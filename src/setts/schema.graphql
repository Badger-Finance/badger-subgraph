#####################
# Interfaces
#####################

interface ERC20 {
  id: ID!
  name: String!
  symbol: String!
  decimals: BigInt!
  totalSupply: BigInt!
}

interface Vault {
  id: ID!
  token: Token!
  balance: BigInt!
  pricePerFullShare: BigInt!
}

interface VaultBalance {
  id: ID!
  netDeposit: BigInt!
  netShareDeposit: BigInt!
  grossDeposit: BigInt!
  grossShareDeposit: BigInt!
  grossWithdraw: BigInt!
  grossShareWithdraw: BigInt!
}

interface Snapshot {
  id: ID!
  timestamp: Int!
}

interface TokenDistribution {
  id: ID!
  timestamp: Int!
  token: Token!
  amount: BigInt!
  blockNumber: BigInt!
  strategy: Strategy
  sett: Sett
}

#####################
# Entities
#####################

type Registry @entity {
  id: ID!
}

type Token implements ERC20 @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: BigInt!
  totalSupply: BigInt!
}

type Sett implements ERC20 & Vault & VaultBalance @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: BigInt!
  totalSupply: BigInt!
  token: Token!
  balance: BigInt!
  pricePerFullShare: BigInt!
  netDeposit: BigInt!
  netShareDeposit: BigInt!
  grossDeposit: BigInt!
  grossShareDeposit: BigInt!
  grossWithdraw: BigInt!
  grossShareWithdraw: BigInt!
  controller: Controller
  strategy: Strategy
  treeDistributions: [BadgerTreeDistribution!]! @derivedFrom(field: "sett")
  harvests: [SettHarvest!]! @derivedFrom(field: "sett")
}

type SettSnapshot implements ERC20 & Vault & VaultBalance & Snapshot @entity {
  id: ID!
  timestamp: Int!
  name: String!
  symbol: String!
  decimals: BigInt!
  totalSupply: BigInt!
  token: Token!
  balance: BigInt!
  pricePerFullShare: BigInt!
  netDeposit: BigInt!
  netShareDeposit: BigInt!
  grossDeposit: BigInt!
  grossShareDeposit: BigInt!
  grossWithdraw: BigInt!
  grossShareWithdraw: BigInt!
}

type UserSettBalance implements VaultBalance @entity {
  id: ID!
  user: User!
  sett: Sett!
  netDeposit: BigInt!
  netShareDeposit: BigInt!
  grossDeposit: BigInt!
  grossShareDeposit: BigInt!
  grossWithdraw: BigInt!
  grossShareWithdraw: BigInt!
}

type Transaction @entity {
  id: ID!
  transfers: [Transfer!]! @derivedFrom(field: "transaction")
}

type Transfer implements Snapshot @entity {
  id: ID!
  timestamp: Int!
  sett: Sett!
  from: User!
  to: User!
  amount: BigInt!
  transaction: Transaction!
}

type User @entity {
  id: ID!
  settBalances: [UserSettBalance!]! @derivedFrom(field: "user")
}

type BadgerTreeDistribution implements TokenDistribution @entity {
  id: ID!
  timestamp: Int!
  token: Token!
  amount: BigInt!
  blockNumber: BigInt!
  strategy: Strategy
  sett: Sett
}

type SettHarvest implements TokenDistribution @entity {
  id: ID!
  timestamp: Int!
  token: Token!
  amount: BigInt!
  blockNumber: BigInt!
  strategy: Strategy
  sett: Sett
}

type Strategy @entity {
  id: ID!
  controller: Controller
  sett: Sett
  treeDistributions: [BadgerTreeDistribution!]! @derivedFrom(field: "strategy")
  harvests: [SettHarvest!]! @derivedFrom(field: "strategy")
}

type Controller @entity {
  id: ID!
  strategies: [Strategy!]! @derivedFrom(field: "controller")
  setts: [Sett!]! @derivedFrom(field: "controller")
}
