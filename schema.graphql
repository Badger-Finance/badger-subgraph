type Vault @entity {
  id: ID!
  "Amount of underlying token per 1 share"
  pricePerFullShare: BigDecimal!
  "Total shares supply"
  totalSupply: BigDecimal!
  "Full vault underlying token balance (vault + strategy)"
  vaultBalance: BigDecimal!
  "Strategy underlying token balance"
  strategyBalance: BigDecimal!
  # TODO:
  "How much the vault allows to be borrowed"
  available: BigDecimal!
  "Deposit token"
  underlyingToken: Token!
  shareToken: Token!
  currentController: Controller
  currentStrategy: Strategy
  "Transaction metadata for the last update"
  transaction: Transaction!
  # TODO:
  "balance: totalDeposited - totalWithdrawn: all deposits of underlying made by external accounts"
  netDeposits: BigDecimal!
  totalDeposited: BigDecimal!
  totalWithdrawn: BigDecimal!
  "totalActiveShares: totalSharesMinted - totalSharesBurned"
  totalActiveShares: BigDecimal!
  totalSharesMinted: BigDecimal!
  totalSharesBurned: BigDecimal!
  totalEarnings: BigDecimal!
  # raw
  pricePerFullShareRaw: BigInt!
  totalSupplyRaw: BigInt!
  # TODO:
  "Balance of the Vault contract of underlying Token + balance of the Strategy contract of underlying Token"
  vaultBalanceRaw: BigInt!
  # TODO:
  "Balance of underlying Token specifically held in the strategy"
  strategyBalanceRaw: BigInt!
  # TODO:
  "How much the vault allows to be borrowed"
  availableRaw: BigInt!
  netDepositsRaw: BigInt!
  totalDepositedRaw: BigInt!
  totalWithdrawnRaw: BigInt!
  totalActiveSharesRaw: BigInt!
  totalSharesMintedRaw: BigInt!
  totalSharesBurnedRaw: BigInt!
  totalEarningsRaw: BigInt!
  totalHarvestCalls: BigInt!
  # derived fields
  transfers: [Transfer!]! @derivedFrom(field: "vault")
  deposits: [Deposit!]! @derivedFrom(field: "vault")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "vault")
  harvests: [Harvest!]! @derivedFrom(field: "vault")
  balances: [AccountVaultBalance!]! @derivedFrom(field: "vault")
  strategies: [Strategy!] @derivedFrom(field: "vault")
  controllers: [Controller!] @derivedFrom(field: "vault")
}

type Account @entity {
  "User ethereum address"
  id: ID!
  vaultBalances: [AccountVaultBalance!]! @derivedFrom(field: "account")
  "Account deposits"
  deposits: [Deposit!]! @derivedFrom(field: "account")
  "Account withdrawals"
  withdrawals: [Deposit!]! @derivedFrom(field: "account")
  "Incoming transfers"
  receivedTransfers: [Transfer!]! @derivedFrom(field: "to")
  "Outgoing transfers"
  sentTransfers: [Transfer!]! @derivedFrom(field: "from")
}

type AccountVaultBalance @entity {
  id: ID!
  vault: Vault!
  account: Account!
  "Deposit/withdrawal token"
  underlyingToken: Token!
  shareToken: Token!
  "Net deposits of a given Account within a given Vault. Transfers between accounts are taken into consideration for this metric"
  netDeposits: BigDecimal!
  "Total tokens deposited by this Account in Vault"
  totalDeposited: BigDecimal!
  "Total tokens withdrawn by this Account in Vault"
  totalWithdrawn: BigDecimal!
  "Total tokens sent to another account by this Account in Vault"
  totalSent: BigDecimal!
  "Total tokens received from another account by this Account in Vault"
  totalReceived: BigDecimal!
  "Shares are the token minted by the Vault"
  shareBalance: BigDecimal!
  totalSharesMinted: BigDecimal!
  totalSharesBurned: BigDecimal!
  totalSharesSent: BigDecimal!
  totalSharesReceived: BigDecimal!
  "Net deposits of a given Account within a given Vault. Transfers between accounts are taken into consideration for this metric"
  netDepositsRaw: BigInt!
  "Total tokens deposited by this Account in Vault"
  totalDepositedRaw: BigInt!
  "Total tokens withdrawn by this Account in Vault"
  totalWithdrawnRaw: BigInt!
  "Total tokens sent to another account by this Account in Vault"
  totalSentRaw: BigInt!
  "Total tokens received from another account by this Account in Vault"
  totalReceivedRaw: BigInt!
  "Shares are the token minted by the Vault"
  shareBalanceRaw: BigInt!
  totalSharesMintedRaw: BigInt!
  totalSharesBurnedRaw: BigInt!
  totalSharesSentRaw: BigInt!
  totalSharesReceivedRaw: BigInt!
}

type Token @entity {
  id: ID!
  address: Bytes!
  decimals: Int!
  name: String!
  symbol: String!
}

type Transfer @entity {
  id: ID!
  from: Account!
  to: Account!
  value: BigInt!
  amount: BigInt!
  vault: Vault!
  pricePerFullShare: BigInt!
  vaultBalance: BigInt!
  totalSupply: BigInt!
  available: BigInt!
  transaction: Transaction!
}

interface Action @entity {
  id: ID!
  vault: Vault!
  account: Account!
  amount: BigInt!
  shares: BigInt!
  pricePerFullShare: BigInt!
  vaultBalance: BigInt!
  totalSupply: BigInt!
  available: BigInt!
  transaction: Transaction!
}

type Deposit implements Action @entity {
  id: ID!
  vault: Vault!
  account: Account!
  amount: BigInt!
  shares: BigInt!
  pricePerFullShare: BigInt!
  vaultBalance: BigInt!
  totalSupply: BigInt!
  available: BigInt!
  transaction: Transaction!
}

type Withdrawal implements Action @entity {
  id: ID!
  vault: Vault!
  account: Account!
  amount: BigInt!
  shares: BigInt!
  pricePerFullShare: BigInt!
  vaultBalance: BigInt!
  totalSupply: BigInt!
  available: BigInt!
  transaction: Transaction!
}

type Harvest @entity {
  id: ID!
  vault: Vault!
  strategy: Strategy!
  pricePerFullShareBefore: BigDecimal!
  pricePerFullShareAfter: BigDecimal!
  vaultBalanceBefore: BigDecimal!
  vaultBalanceAfter: BigDecimal!
  strategyBalanceBefore: BigDecimal!
  strategyBalanceAfter: BigDecimal!
  earnings: BigDecimal!
  pricePerFullShareBeforeRaw: BigInt!
  pricePerFullShareAfterRaw: BigInt!
  vaultBalanceBeforeRaw: BigInt!
  vaultBalanceAfterRaw: BigInt!
  strategyBalanceBeforeRaw: BigInt!
  strategyBalanceAfterRaw: BigInt!
  earningsRaw: BigInt!
  transaction: Transaction!
}

type Strategy @entity {
  "Ethereum address"
  id: ID!
  vault: Vault!
  totalEarnings: BigDecimal!
  totalEarningsRaw: BigInt!
  harvests: [Harvest!]! @derivedFrom(field: "strategy")
  activeOnVaults: [Vault!] @derivedFrom(field: "currentStrategy")
}

type Controller @entity {
  "Ethereum address"
  id: ID!
  vault: Vault!
  activeOnVaults: [Vault!] @derivedFrom(field: "currentController")
}

type Transaction @entity {
  "ID = Transaction Hash"
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  # duplicated field to allow for byte search with transactionHash_contains
  transactionHash: Bytes!
  deposits: [Deposit!]! @derivedFrom(field: "transaction")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "transaction")
  transfers: [Transfer!]! @derivedFrom(field: "transaction")
  harvests: [Harvest!]! @derivedFrom(field: "transaction")
  # TODO: rename
  "List of Vaults that last updated on this transaction"
  vaultsUpdated: [Vault!]! @derivedFrom(field: "transaction")
}

type Geyser @entity {
  id: ID!
  totalStaked: BigInt!
  stakeEvents: [StakedEvent!]! @derivedFrom(field: "geyser")
  unstakeEvents: [UnstakedEvent!]! @derivedFrom(field: "geyser")
}

# # Each user has account data for one geyser
# type GeyserAccountData @entity {
#   id: ID!
#   geyser: Geyser!
#   stakes: [GeyserStake!]! @derivedFrom(field: "account")
#   lastUpdate: BigInt!
#   cumulativeShareSeconds: BigInt!
# }

# type GeyserStake @entity {
#   id: ID!
#   geyser: Geyser!
#   account: Account!
#   amount: BigInt!
#   stakedAt: BigInt!
# }

type StakedEvent @entity {
  id: ID!
  geyser: Geyser!
  user: Bytes!
  amount: BigInt!
  total: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  data: Bytes!
}

type UnstakedEvent @entity {
  id: ID!
  geyser: Geyser!
  user: Bytes!
  amount: BigInt!
  total: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  data: Bytes!
}

type HarvestEvent @entity {
  id: ID!
  sourceAddress: String!
  sourceId: String!
}

type FarmHarvestEvent @entity {
  id: ID!
  totalFarmHarvested: BigInt!
  farmToRewards: BigInt!
  governancePerformanceFee: BigInt!
  strategistPerformanceFee: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type SushiHarvestEvent @entity {
  id: ID!
  xSushiHarvested: BigInt!
  totalxSushi: BigInt!
  toStrategist: BigInt!
  toGovernance: BigInt!
  toBadgerTree: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type TokenBalance @entity {
  id: ID!
  balance: BigInt!
  token: Token!
}
